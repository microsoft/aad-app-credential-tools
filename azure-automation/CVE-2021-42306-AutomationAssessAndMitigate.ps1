<#
.SYNOPSIS
    This script is used to check which automation accounts are impacted by 
    CVE-2021-42306 and for each impacted account, it allows the user to remediate the issue. 

.DESCRIPTION
    CVE-2021-42306 has more details about the issue regarding the Azure-AD key credentials.
    This script will assess automation account which has configured RunAs accounts and checks 
    if the corresponding AAD application is impacted or not. If it is impacted, on confirmation 
    it will renew the key credentials of Azure-AD App by deleting the older certificate(s) and 
    uploading new self-signed certificate to the Azure-AD App, which will mitigate the issue.

    Prerequisites: 
    1. .NET framework 4.7.2 or later installed.
    2. Windows PowerShell version 5.1(64-bit) or later installed and run with Administrator permissions.
    3. Azure Az PowerShell module latest version installed, having minimum version Az.Accounts (2.5.4)`, `Az.Resources (4.4.0)` & `Az.Automation (1.7.1)` cmdlets
    4. You need the following permissions on the Azure user account:
        a. ‘Contributor’ access on the Azure subscription that has the Azure Automation account, and
        b. Owner permissions on the associated Run-As-Account Azure AD Application.

    Examples to run :
        1) To assess and mitigate single AppID - Ex:  .\CVE-2021-42306-AutomationAssessAndMitigate.ps1 -AppId 344456-2244-45674-8340-20d95505566
        2) To assess and mitigate set of subscriptions - Ex: .\CVE-2021-42306-AutomationAssessAndMitigate.ps1 - SubscriptionIds subId1,subId2

.PARAMETER SubscriptionIds
    [Optional] Assess and mitigate all the Automation accounts from the input subscriptions.

.PARAMETER AppId
    [Optional] Assess and mitigate Automation RunAs Azure-AD App.

.PARAMETER Env
    [Optional] Cloud environment name. 'AzureCloud' by default.

.PARAMETER Verbose
    [Optional] Enable verbose logging

.EXAMPLE
    PS> .\CVE-2021-42306-AutomationAssessAndMitigate.ps1 -AppId <appId>

.EXAMPLE
    PS> .\CVE-2021-42306-AutomationAssessAndMitigate.ps1 -SubscriptionIds subId1,subId2

.NOTES
    1. If the runbooks uses RunAs Azure-AD App to access the resources through Az/AzureRM cmdlets, 
    access-tokens may become invalid due to certificate changes, and so jobs may fail. 
    In this case, jobs can be manually retried after mitigation.

    2. New self-signed certificate needs to be provisioned on all hybrid workers connected to that automation account.
    (https://docs.microsoft.com/en-us/azure/automation/automation-hrw-run-runbooks#runas-script)

    3. In case the jobs are critical, please follow manual mitigation steps.
        a. Renew the certificate using the manual steps mentioned in the [manage runas account documentation](https://docs.microsoft.com/en-us/azure/automation/manage-runas-account).
        b. Update the certificate on all HRWs that use the Run As Account for authentication ([steps](https://docs.microsoft.com/en-us/azure/automation/automation-hrw-run-runbooks#runas-script)).
        c. Wait for jobs which started before the certificate renewal to complete.
        d. Delete the older certificate from the AAD application.

.AUTHOR Microsoft

.VERSION 1.0
#>

#Requires -Modules @{ ModuleName="Az.Accounts"; ModuleVersion="2.5.4" },@{ ModuleName="Az.Resources"; ModuleVersion="4.4.0" },@{ ModuleName="Az.Automation"; ModuleVersion="1.7.1" }
#Requires -PSEdition Desktop
#Requires -RunAsAdministrator

[CmdletBinding()]
Param(
    [string[]]
    $SubscriptionIds,

    [string]
    $AppId,

    # Max number of retries for List Applications or List ServicePrincipals MS Graph request
    [int]
    $MaxRetryLimitForGraphApiCalls = 5,

    [ValidateSet("AzureCloud", "AzureUSGovernment", "AzureChinaCloud")]
    [Parameter(Mandatory = $false, HelpMessage = "Cloud environment name. 'AzureCloud' by default")]
    [string]
    $Env = "AzureCloud"
)

function Show-Description {
    Write-Warning ""
    Write-Warning "The script can be used to run at a time on single AAD App( belong to automation) or set of subscriptions." 
    Write-Warning "Please note that the script will work for Automation managed RunAs AAD Apps, and if you are using Third-party/CA-signed certificates, please follow manual mitigation steps mentioned in Notes"
    Write-Warning ""

    Write-Warning "Prerequisites:"
    Write-Warning "1. .NET framework 4.7.2 or later installed."
    Write-Warning "2. Windows PowerShell version 5.1(64-bit) or later installed and run with Administrator permissions."
    Write-Warning "3. Azure Az PowerShell module latest version installed, having minimum version Az.Accounts (2.5.4)`, `Az.Resources (4.4.0)` & `Az.Automation (1.7.1)` cmdlets"
    Write-Warning "4. You need the following permissions on the Azure user account:"
    Write-Warning "    a. ‘Contributor’ access on the Azure subscription that has the Azure Automation account, and"
    Write-Warning "    b. Owner permissions on the associated Run-As-Account Azure AD Application."

    Write-Warning "Examples to run :"
    Write-Warning "    a. To assess and mitigate single AppID - Ex:  .\CVE-2021-42306-AutomationAssessAndMitigate.ps1 -AppId 344456-2244-45674-8340-20d95505566"
    Write-Warning "    b. To assess and mitigate set of subscriptions - Ex: .\CVE-2021-42306-AutomationAssessAndMitigate.ps1 - SubscriptionIds subId1,subId2"
}

Function Get-MSGraphEndpoint
{
    param(
        [string]
        $Env
    )

    switch ($Env)
    {
        "AzureCloud" { return "https://graph.microsoft.com" }
        "AzureChinaCloud" { return "https://microsoftgraph.chinacloudapi.cn" }
        "AzureUSGovernment" { return "https://graph.microsoft.us" }
        default { throw "$($Env) is not a valid cloud environment." }
    }
}

class AutomationAccount {
    [string] $Name
    [string] $ResourceId
    [string] $Region
    [string] $ResourceGroup
    [string] $SubscriptionId
    [string] $RunAsAppId
    [DateTimeOffset] $RunAsConnectionCreationTime
    [bool] $UsesThirdParytCert
}

$ImpactedAccounts = New-Object System.Collections.ArrayList

function Assess-Impact {
    Write-Output ""
    Write-Output "================================================="
    Write-Output "Started Assessing impacted Automation accounts..."
    Write-Output "================================================="

    $allAccounts = New-Object System.Collections.ArrayList
    $skipToken = $null
    do {
        # Get all automation accounts accessible to current user
        $queryPayload = @{
            query = 'resources | where type == "microsoft.automation/automationaccounts"'
            options = @{
            '$top' = 1000
            '$skipToken' = $skipToken
            'resultFormat' = "table"
            }
        }
        $payload = $queryPayload | ConvertTo-Json

        $resp = Invoke-AzRestMethod -Path "/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01" -Method POST -Payload $payload
        $resp = $resp.Content | ConvertFrom-Json

    
        $defaultDate = (Get-Date 01-01-1970)
        foreach ($row in $resp.data.rows)
        {
            $a = [AutomationAccount]@{
                ResourceId = $row[0]
                Name = $row[1]
                Region = $row[5]
                ResourceGroup = $row[6]
                SubscriptionId = $row[7]
                RunAsAppId = ""
                RunAsConnectionCreationTime = $defaultDate
                UsesThirdParytCert = $false
            }
            Write-Debug "$($a.Name), $($a.Region), $($a.ResourceGroup), $($a.SubscriptionId)"

            $allAccounts.Add($a) > $null
        }
        $skipToken = $resp.'$skipToken'
    } until (!$skipToken)

    Assess-ImpactBySubscriptionGroup $allAccounts
    Write-Output ""
    Write-Output "==================================================="
    Write-Output "Completed Assessing impacted Automation accounts..."
    Write-Output "==================================================="  
    Write-Output ""  
}

function Assess-ImpactBySubscriptionGroup {
    param ($accounts)

    if ($null -ne $SubscriptionIds -and $SubscriptionIds.Count -ne 0)
    {
        Write-Verbose "Filtering by subscription: $SubscriptionId"
        $accounts = $accounts | Where-Object { $_.SubscriptionId -in $SubscriptionIds }
    }

    # Group by subscription ID
    $accountsGroup = $accounts | Group-Object { $_.SubscriptionId }

    foreach ($item in $accountsGroup) {
        Write-Output ""
        Write-Output "Procesing accounts in subscription $($item.Name): $($item.Group.Count)"
        Select-AzSubscription -SubscriptionId $item.Name > $null

        foreach ($a in $item.Group) {
            Assess-Account $a
        }
    }
}

function Assess-ImpactByAppId {

    # Check aad app id is valid or not
    if ([string]::IsNullOrWhiteSpace($AppId))
    {
        Write-Verbose "Given AAD App ID is invalid, Provide valid AAD App ID: $AppId"
    }

    # Get the given aad app
    $aadApp = Get-AzADApplication -ApplicationId $AppId

    # Check if the AAD app belong to Azure automation
    if( $null -ne $aadApp -and $aadApp.HomePage.ToLower().Contains("providers/microsoft.automation/automationaccounts")) {

        $resoureDetails = ParseResourceId $aadApp.HomePage

        if( $null -ne $resoureDetails -and $resoureDetails.Count -eq 3 -and
            ![string]::IsNullOrWhiteSpace($resoureDetails[0]) -and ![string]::IsNullOrWhiteSpace($resoureDetails[1]) -and ![string]::IsNullOrWhiteSpace($resoureDetails[2])) {

                Write-Verbose "Given App ID belongs to Azure automation, proceeding for further accessment. Subscription: $($resoureDetails[0]), ResourceGroup: $($resoureDetails[1]), Automation account name: $($resoureDetails[2])"
                Select-AzSubscription -SubscriptionId $resoureDetails[0] > $null
                $account = Get-AzAutomationAccount -ResourceGroupName $resoureDetails[1] -Name $resoureDetails[2]
                $defaultDateTime = (Get-Date 01-01-1970)

                if( $null -ne $account){

                    $a = [AutomationAccount]@{
                        ResourceId = $aadApp.HomePage
                        Name = $account.AutomationAccountName
                        Region = $account.Location
                        ResourceGroup = $account.ResourceGroupName
                        SubscriptionId = $account.SubscriptionId
                        RunAsAppId = ""
                        RunAsConnectionCreationTime = $defaultDateTime
                        UsesThirdParytCert = $false
                    }
                    Assess-Account $a
                } else {
                    Write-Error "Unable to Assess Azure-AD App $($AppId) - Reason: Unable to find the automation account."
                }
            } else {
                Write-Error "Unable to Assess Azure-AD App $($AppId) - Reason: Unable to find the automation account."
            }
    } else {
        Write-Error "Unable to assess Azure-AD App $($AppId) - Reason: Application not Managed by Automation."
    }
}

function Assess-Account {
    param ([AutomationAccount] $account)

    Write-Verbose "Assessing account $($account.ResourceId)"
    # Get the RunAs connection
    $conn = Get-AzAutomationConnection -AutomationAccountName $account.Name -ResourceGroupName $account.ResourceGroup -Name "AzureRunAsConnection" -ErrorAction SilentlyContinue

    if ($null -ne $conn -and $conn.ConnectionTypeName -eq "AzureServicePrincipal") {
        $account.RunAsAppId = $conn.FieldDefinitionValues.ApplicationId
        $account.RunAsConnectionCreationTime = $conn.CreationTime

        Assess-CertificatesOnApp $account
    }
    else {
        Write-Verbose "Account $($a.ResourceId) is not impacted"
    }
}

function Assess-CertificatesOnApp {
    param ([AutomationAccount] $account)

    $url = "$($MsGraphEndpoint)/beta/applications?`$filter=appId eq '$($account.RunAsAppId)'&`$select=id,appId,keyCredentials"

    $resp = Make-MSGraphRequest -Url $url -MaxRetryLimit $MaxRetryLimitForGraphApiCalls

    if ($null -ne $resp -and $null -ne $resp.value.keyCredentials) {
        foreach ($keyCred in $resp.value.keyCredentials) {
            if (($keyCred.Key.Length -gt 0) -and ($keyCred.type -eq 'AsymmetricX509Cert') -and (($keyCred.usage -eq 'Verify') -or ($keyCred.usage -eq 'Encrypt'))) {
                # check cert is not expired
                if ((Get-Date $keyCred.endDateTime) -gt (Get-Date)) {
                    Assess-Certificate $account $keyCred
                }
            }
        }
    }
    else {
        Write-Error "Unable to Assess Account $($account.ResourceId) - Reason: Failed to retrieve metadata from Azure Graph API"
    }
}

# Remove unnecessary new line characters and whitespace in url
Function Trim-Url
{
    param(
        [string]
        $Url
    )

    return $Url -replace '`n','' -replace '\s+', ''
}

# Make MS Graph request with retry and exponential backoff
Function Make-MSGraphRequest
{
    param(
        [string]
        $Url,

        [int]
        $MaxRetryLimit,

        [int]
        $flatMinSeconds = 10,

        [bool]
        $AddConsistencyLevel
    )

    $MsGraphToken = (Get-AzAccessToken -ResourceUrl $MsGraphEndpoint).Token

    $headers = @{
        "Authorization" = "Bearer $($MsGraphToken)"
    }

    if ($AddConsistencyLevel) {
        $headers["ConsistencyLevel"] = "eventual"
    }

    for ($i=1; $i -le $MaxRetryLimit; $i+=1)
    {
        try
        {
            Write-Verbose "GET $($Url)"
            $result = Invoke-RestMethod -Uri $Url -Headers $headers -Method "GET" -Verbose:$false
            break
        }
        catch
        {
            if ($_.Exception.Response.StatusCode.value__ -eq 429)
            {
                # Sleep then retry (Exponential backoff)
                $sleepDuration = [Math]::Pow(2,$i) + $flatMinSeconds
                Write-Verbose "Retry after sleeping for $($sleepDuration) seconds"
                Start-Sleep -s $sleepDuration
                continue
            }

            if ($_.Exception.Response.StatusCode.value__ -eq 404)
            {
                Write-Warning "AAD Object not found. Query - '$($Url)'"
                break
            }
        }
    }

    if ($i -gt $MaxRetryLimit)
    {
        $Url = Trim-Url -Url $Url
        Write-Warning "Unexpected error while connecting to the Azure Graph API. URL - '$($Url)'"
    }

    return $result
}


function Assess-Certificate {
    param (
        [AutomationAccount] $account,
        $keyCred
    )

    $automationCertIssuerName = "DC=$($account.Name)_$($account.ResourceGroup)_$($account.SubscriptionId)"

    if ($keyCred.hasExtendedValue -eq $true) {
        $ImpactedAccounts.Add($account) > $null
        Write-Output "Account $($account.ResourceId) is impacted for cert: $($keyCred.customKeyIdentifier)"
    }
    else {
    }

    try {
        $certBytes = [Convert]::FromBase64String($keyCred.key)
        $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($certBytes)
    }
    catch {
        Write-Error "Unable to assess impact for $($account.ResourceId) - Reason: Issue processing certificate."
    }

    if ($null -ne $cert) {
        if ($cert.Issuer -eq $automationCertIssuerName) {
            Write-Verbose "Account $($account.ResourceId) uses a self-signed cert with thumbprint: $($cert.Thumbprint)."
        }
        else {
            $account.UsesThirdParytCert = $true
            Write-Verbose "Account $($account.ResourceId) uses a third-party certificate with issuer: $($cert.Issuer)."
        }
        Write-Debug "issuer: $($cert.Issuer), subject: $($cert.Subject), expiry: $($cert.NotAfter), extValue: $($keyCred.hasExtendedValue)"
    }
}

function Mitigate-Incident {
    param (
        $accounts
    )

    if ($accounts.Count -eq 0) {
        Write-Output ""
        Write-Output "No impacted accounts to mitigate."
        return
    }

    Write-Output ""
    Write-Output "======================"
    Write-Output "Starting mitigation..."
    Write-Output "======================"
    $count = 0
    foreach ($a in $accounts)
    {
        if ($a.UsesThirdParytCert) {
            Write-Output "$($a.ResourceId) uses a third-party certificate."
            $thirdPartyRenew = Read-Host "Do you want to renew this account with a self-signed certificate for mitigation? (Y/N): "

            if ($thirdPartyRenew -ne "Y" -and $thirdPartyRenew -ne 'y') {
                continue
            }
        }

        Write-Output ""
        $renew = Read-Host "Renew RunAs certificate for account $($a.ResourceId) (Y/N): "

        if ($renew -eq "Y" -or $renew -eq 'y') {
            Remediate-Account $a
            ++$count
        }
    }

    Write-Output ""
    Write-Output "======================"
    Write-Output "Completed mitigation. Total accounts processed -$($count)"
    Write-Output "======================"    
}

function Remediate-Account {
    param ([AutomationAccount]$account)

    Write-Output ""
    Write-Output "Started Rotating certificate for $($account.ResourceId)"
    Select-AzSubscription -SubscriptionId $account.SubscriptionId > $null

    $appId = $account.RunAsAppId
    $subId = $account.SubscriptionId
    $resourceGroup = $account.ResourceGroup
    $accountName = $account.Name

    # To remediate AAD App, user should have Automation Contributor role access and Application Administrator permission on AAD App
    # Checking user write access on automation account.
    $writePermission = Check-WriteAccessOnAutomationAccount $account
    if(!$writePermission ) {
        Write-Error "Unable to mitigate $($account.ResourceId) - Reason: User does not have write permission on the Automation account. Please check prerequisites."
        return
    }

    Write-Verbose "User has write permission on Automation account $($account.ResourceId)"

    Write-Debug "Creating new certificate"
    $certName = "$($accountName)_$($resourceGroup)_$($subId)"
    $cert = New-SelfSignedCertificate -KeyUsageProperty All -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -FriendlyName $certName -Subject "DC=$certName" -HashAlgorithm SHA256 -KeyLength 2048 -KeyExportPolicy ExportableEncrypted
    $certString = [convert]::tobase64string($cert.RawData)

    Add-Type -AssemblyName System.Web
    $securePassword = ConvertTo-SecureString $([System.Web.Security.Membership]::GeneratePassword(25, 10)) -AsPlainText -Force
    Export-PfxCertificate -FilePath "$pwd\$certName.pfx" -Cert $cert -Password $securePassword -NoProperties > $null    

    try {

        Write-Verbose "Deleting existing certs on app with AppId: $appId"
        $creds = Get-AzADAppCredential -ApplicationId $appId | Where-Object { $_.Type -eq "AsymmetricX509Cert" }
        foreach ($cred in $creds) {
            Remove-AzADAppCredential -ApplicationId $appId -KeyId ([Guid]::Parse($cred.KeyId))
            if (!$?) {
                Write-Error "Unable to mitigate $($account.ResourceId) - Reason: Failed to remove existing certificates from the AAD application. Please check prerequisites."
                return
            }
        }   
        
        Write-Verbose "Adding the new certificate on the AAD application"
        New-AzADAppCredential -ApplicationId $appId -CertValue $certString -StartDate $cert.NotBefore -EndDate $cert.NotAfter > $null
        if (!$?) {
            Write-Error "Unable to mitigate $($account.ResourceId) - Reason: Failed to add new certificate to the AAD application. Please check prerequisites."
            return
        }        
    }
    catch {
        Write-Error -Message "Unable to mitigate, error while accessing the App. Error Message: $($Error[0].Exception.Message)"
        return        
    }

    Write-Verbose "Creating the RunAs certificate asset"
    Remove-AzAutomationCertificate -AutomationAccountName $accountName -ResourceGroupName $resourceGroup -Name "AzureRunAsCertificate" -ErrorAction SilentlyContinue > $null
    New-AzAutomationCertificate -AutomationAccountName $accountName -ResourceGroupName $resourceGroup -Name "AzureRunAsCertificate" -Exportable -Path "$pwd\$certName.pfx" -Password $securePassword > $null
    if (!$?) {
        Write-Error "Unable to mitigate $($account.ResourceId) - Reason: Failed to update automation account with new runas certificate, may be due to Network or Permission issue."
        Write-Error "Please check prerequisites and rerun the script or mitigate manually. As certificate is already rotated in AAD App, jobs may fail until RunAs Account is updated with new certificate "
        return
    }

    Write-Verbose "Update the RunAs connection"
    Set-AzAutomationConnectionFieldValue -AutomationAccountName $accountName -ResourceGroupName $resourceGroup -Name "AzureRunAsConnection" -ConnectionFieldName CertificateThumbprint -Value $cert.Thumbprint > $null
    if (!$?) {
        Write-Error "Unable to mitigate $($account.ResourceId) - Reason: Failed to update automation account with new runas certificate, may be due to Network or Permission issue."
        Write-Error "Please check prerequisites and rerun the script or mitigate manually. As certificate is already rotated in AAD App, jobs may fail until RunAs Account is updated with new certificate "
        return
    }

    Write-Output "Successfully mitigated account $($account.ResourceId) . If you are using RunAs Connection in Hybrid Jobs, please follow  https://docs.microsoft.com/en-us/azure/automation/automation-hrw-run-runbooks to install latest RunAs Certificate on Hybrid Workers. "
    Write-Output ""
}

function Check-WriteAccessOnAutomationAccount {
    param ([AutomationAccount]$account)

    $resourceGroup = $account.ResourceGroup
    $accountName = $account.Name

    #To remidiate AAD App,user should have Automation Contributor role access and admin permission on AAD App
    # Checking user write access on automation account.
    $VariableName = "Remediation_AAD"+ $(Get-Random)
    $var = Get-AzAutomationVariable -ResourceGroupName $resourceGroup -AutomationAccountName $accountName -Name $VariableName -ErrorAction SilentlyContinue > $null
    while( $null -ne $var)
    {
        $VariableName = "Remediation_AAD"+ $(Get-Random)
        $var = Get-AzAutomationVariable -ResourceGroupName $resourceGroup -AutomationAccountName $accountName -Name $VariableName -ErrorAction SilentlyContinue > $null
    }

    if( $null -eq $var) {
        $var = New-AzAutomationVariable -ResourceGroupName $resourceGroup -AutomationAccountName $accountName -Name $VariableName -Value $VariableName -Encrypted $false
        if( $null -ne $var) {
            Remove-AzAutomationVariable -ResourceGroupName $resourceGroup -AutomationAccountName $accountName -Name $VariableName
            return $true;
        }
    }

    return $false
}

function ParseResourceId {
    param (
       [string]$resourceID
   )
   $array = $resourceID.Split('/')
   $indexSubscriptionId = 0..($array.Length -1) | where {$array[$_] -ieq 'subscriptions'}
   $indexResourceGroup = 0..($array.Length -1) | where {$array[$_] -ieq 'resourcegroups'}
   $result = $array.get($indexSubscriptionId+1), $array.get($indexResourceGroup+1), $array.get($array.Length -1)
   return $result
}


# Start point for the script
Show-Description

Connect-AzAccount -Environment $Env -ErrorAction Stop > $null
$MsGraphEndpoint = Get-MSGraphEndpoint $Env

if(![string]::IsNullOrWhiteSpace($AppId)){
    Write-Output "Start Assessment for given AAD AppID."
    # Assess given Aad App ID and mitigate if it belong to Azure automation.
    Assess-ImpactByAppId

    Mitigate-Incident $ImpactedAccounts
} elseif ($null -ne $SubscriptionIds -and $SubscriptionIds.Count -ne 0) {
    Write-Output "Start Assessment for given Subscriptions."
    # Assess all the given subscriptions and mitigate all the App Id's belong to Azure automation
    Assess-Impact

    Mitigate-Incident $ImpactedAccounts
}



# SIG # Begin signature block
# MIIjkQYJKoZIhvcNAQcCoIIjgjCCI34CAQExDzANBglghkgBZQMEAgEFADB5Bgor
# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG
# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCBCWDBK7mt049ha
# cnHKDxWa64JKFjfjN4qExPDGVeJWmaCCDYEwggX/MIID56ADAgECAhMzAAACUosz
# qviV8znbAAAAAAJSMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD
# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p
# bmcgUENBIDIwMTEwHhcNMjEwOTAyMTgzMjU5WhcNMjIwOTAxMTgzMjU5WjB0MQsw
# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy
# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
# AQDQ5M+Ps/X7BNuv5B/0I6uoDwj0NJOo1KrVQqO7ggRXccklyTrWL4xMShjIou2I
# sbYnF67wXzVAq5Om4oe+LfzSDOzjcb6ms00gBo0OQaqwQ1BijyJ7NvDf80I1fW9O
# L76Kt0Wpc2zrGhzcHdb7upPrvxvSNNUvxK3sgw7YTt31410vpEp8yfBEl/hd8ZzA
# v47DCgJ5j1zm295s1RVZHNp6MoiQFVOECm4AwK2l28i+YER1JO4IplTH44uvzX9o
# RnJHaMvWzZEpozPy4jNO2DDqbcNs4zh7AWMhE1PWFVA+CHI/En5nASvCvLmuR/t8
# q4bc8XR8QIZJQSp+2U6m2ldNAgMBAAGjggF+MIIBejAfBgNVHSUEGDAWBgorBgEE
# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUNZJaEUGL2Guwt7ZOAu4efEYXedEw
# UAYDVR0RBEkwR6RFMEMxKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1
# ZXJ0byBSaWNvMRYwFAYDVQQFEw0yMzAwMTIrNDY3NTk3MB8GA1UdIwQYMBaAFEhu
# ZOVQBdOCqhc3NyK1bajKdQKVMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly93d3cu
# bWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY0NvZFNpZ1BDQTIwMTFfMjAxMS0w
# Ny0wOC5jcmwwYQYIKwYBBQUHAQEEVTBTMFEGCCsGAQUFBzAChkVodHRwOi8vd3d3
# Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY0NvZFNpZ1BDQTIwMTFfMjAx
# MS0wNy0wOC5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAgEAFkk3
# uSxkTEBh1NtAl7BivIEsAWdgX1qZ+EdZMYbQKasY6IhSLXRMxF1B3OKdR9K/kccp
# kvNcGl8D7YyYS4mhCUMBR+VLrg3f8PUj38A9V5aiY2/Jok7WZFOAmjPRNNGnyeg7
# l0lTiThFqE+2aOs6+heegqAdelGgNJKRHLWRuhGKuLIw5lkgx9Ky+QvZrn/Ddi8u
# TIgWKp+MGG8xY6PBvvjgt9jQShlnPrZ3UY8Bvwy6rynhXBaV0V0TTL0gEx7eh/K1
# o8Miaru6s/7FyqOLeUS4vTHh9TgBL5DtxCYurXbSBVtL1Fj44+Od/6cmC9mmvrti
# yG709Y3Rd3YdJj2f3GJq7Y7KdWq0QYhatKhBeg4fxjhg0yut2g6aM1mxjNPrE48z
# 6HWCNGu9gMK5ZudldRw4a45Z06Aoktof0CqOyTErvq0YjoE4Xpa0+87T/PVUXNqf
# 7Y+qSU7+9LtLQuMYR4w3cSPjuNusvLf9gBnch5RqM7kaDtYWDgLyB42EfsxeMqwK
# WwA+TVi0HrWRqfSx2olbE56hJcEkMjOSKz3sRuupFCX3UroyYf52L+2iVTrda8XW
# esPG62Mnn3T8AuLfzeJFuAbfOSERx7IFZO92UPoXE1uEjL5skl1yTZB3MubgOA4F
# 8KoRNhviFAEST+nG8c8uIsbZeb08SeYQMqjVEmkwggd6MIIFYqADAgECAgphDpDS
# AAAAAAADMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK
# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
# IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0
# ZSBBdXRob3JpdHkgMjAxMTAeFw0xMTA3MDgyMDU5MDlaFw0yNjA3MDgyMTA5MDla
# MH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMT
# H01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTEwggIiMA0GCSqGSIb3DQEB
# AQUAA4ICDwAwggIKAoICAQCr8PpyEBwurdhuqoIQTTS68rZYIZ9CGypr6VpQqrgG
# OBoESbp/wwwe3TdrxhLYC/A4wpkGsMg51QEUMULTiQ15ZId+lGAkbK+eSZzpaF7S
# 35tTsgosw6/ZqSuuegmv15ZZymAaBelmdugyUiYSL+erCFDPs0S3XdjELgN1q2jz
# y23zOlyhFvRGuuA4ZKxuZDV4pqBjDy3TQJP4494HDdVceaVJKecNvqATd76UPe/7
# 4ytaEB9NViiienLgEjq3SV7Y7e1DkYPZe7J7hhvZPrGMXeiJT4Qa8qEvWeSQOy2u
# M1jFtz7+MtOzAz2xsq+SOH7SnYAs9U5WkSE1JcM5bmR/U7qcD60ZI4TL9LoDho33
# X/DQUr+MlIe8wCF0JV8YKLbMJyg4JZg5SjbPfLGSrhwjp6lm7GEfauEoSZ1fiOIl
# XdMhSz5SxLVXPyQD8NF6Wy/VI+NwXQ9RRnez+ADhvKwCgl/bwBWzvRvUVUvnOaEP
# 6SNJvBi4RHxF5MHDcnrgcuck379GmcXvwhxX24ON7E1JMKerjt/sW5+v/N2wZuLB
# l4F77dbtS+dJKacTKKanfWeA5opieF+yL4TXV5xcv3coKPHtbcMojyyPQDdPweGF
# RInECUzF1KVDL3SV9274eCBYLBNdYJWaPk8zhNqwiBfenk70lrC8RqBsmNLg1oiM
# CwIDAQABo4IB7TCCAekwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFEhuZOVQ
# BdOCqhc3NyK1bajKdQKVMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1Ud
# DwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFHItOgIxkEO5FAVO
# 4eqnxzHRI4k0MFoGA1UdHwRTMFEwT6BNoEuGSWh0dHA6Ly9jcmwubWljcm9zb2Z0
# LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y
# Mi5jcmwwXgYIKwYBBQUHAQEEUjBQME4GCCsGAQUFBzAChkJodHRwOi8vd3d3Lm1p
# Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y
# Mi5jcnQwgZ8GA1UdIASBlzCBlDCBkQYJKwYBBAGCNy4DMIGDMD8GCCsGAQUFBwIB
# FjNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2RvY3MvcHJpbWFyeWNw
# cy5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AcABvAGwAaQBjAHkA
# XwBzAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAGfyhqWY
# 4FR5Gi7T2HRnIpsLlhHhY5KZQpZ90nkMkMFlXy4sPvjDctFtg/6+P+gKyju/R6mj
# 82nbY78iNaWXXWWEkH2LRlBV2AySfNIaSxzzPEKLUtCw/WvjPgcuKZvmPRul1LUd
# d5Q54ulkyUQ9eHoj8xN9ppB0g430yyYCRirCihC7pKkFDJvtaPpoLpWgKj8qa1hJ
# Yx8JaW5amJbkg/TAj/NGK978O9C9Ne9uJa7lryft0N3zDq+ZKJeYTQ49C/IIidYf
# wzIY4vDFLc5bnrRJOQrGCsLGra7lstnbFYhRRVg4MnEnGn+x9Cf43iw6IGmYslmJ
# aG5vp7d0w0AFBqYBKig+gj8TTWYLwLNN9eGPfxxvFX1Fp3blQCplo8NdUmKGwx1j
# NpeG39rz+PIWoZon4c2ll9DuXWNB41sHnIc+BncG0QaxdR8UvmFhtfDcxhsEvt9B
# xw4o7t5lL+yX9qFcltgA1qFGvVnzl6UJS0gQmYAf0AApxbGbpT9Fdx41xtKiop96
# eiL6SJUfq/tHI4D1nvi/a7dLl+LrdXga7Oo3mXkYS//WsyNodeav+vyL6wuA6mk7
# r/ww7QRMjt/fdW1jkT3RnVZOT7+AVyKheBEyIXrvQQqxP/uozKRdwaGIm1dxVk5I
# RcBCyZt2WwqASGv9eZ/BvW1taslScxMNelDNMYIVZjCCFWICAQEwgZUwfjELMAkG
# A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx
# HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z
# b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMQITMwAAAlKLM6r4lfM52wAAAAACUjAN
# BglghkgBZQMEAgEFAKCBrjAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgor
# BgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQgUrol7RG8
# Nht7VCFfV4g8vPnR+tIoCMb5iNpJb6YyqM4wQgYKKwYBBAGCNwIBDDE0MDKgFIAS
# AE0AaQBjAHIAbwBzAG8AZgB0oRqAGGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbTAN
# BgkqhkiG9w0BAQEFAASCAQBfzlzOl3m1NJYGn4V8ebWpkK2VVbtsR3nDSNcyx1Ej
# A6SC4vBBD7x1dW2C6Fp4RusqH132ZiJmlvn1lF4aL5Ttl4CbFLgEccsSQ6xbE6YP
# emkf3EmKrpWynBmEAqNhfwIDt+7D4KNQcXmo/n7l/4W2o4UrZMSOLHi0Ztf9wA2z
# Kn8bvoy8VxS64utjuAa+9m/qs+93srQ6BvIHyfV6mYlsP+2/hx76LqM/2zWffDrE
# +nsxGKfYz1Y4x0hzTJwVwUMB7kh0WAsLqKXMcHYWhXEE8+S/P2smr+MJzBhGWygW
# fHsr/l5n2eSTXxyW1YR8JpgUE/rIUqmqcs9uDzOYTvj9oYIS8DCCEuwGCisGAQQB
# gjcDAwExghLcMIIS2AYJKoZIhvcNAQcCoIISyTCCEsUCAQMxDzANBglghkgBZQME
# AgEFADCCAVQGCyqGSIb3DQEJEAEEoIIBQwSCAT8wggE7AgEBBgorBgEEAYRZCgMB
# MDEwDQYJYIZIAWUDBAIBBQAEIKLDSu3FbY21KeghikLQFQBAzWgyhA87bJzB6Lqz
# yzcLAgZhk9285ZcYEjIwMjExMTE3MTkyMDI1Ljc2WjAEgAIB9KCB1KSB0TCBzjEL
# MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
# bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWlj
# cm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBU
# U1MgRVNOOkY4N0EtRTM3NC1EN0I5MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1T
# dGFtcCBTZXJ2aWNloIIORDCCBPUwggPdoAMCAQICEzMAAAFji2TGyYWWZXYAAAAA
# AWMwDQYJKoZIhvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
# bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
# b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
# HhcNMjEwMTE0MTkwMjIzWhcNMjIwNDExMTkwMjIzWjCBzjELMAkGA1UEBhMCVVMx
# EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
# FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJh
# dGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkY4N0Et
# RTM3NC1EN0I5MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNl
# MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArXEX9hKdyXRikv+o3YWd
# /CN/SLxr4LgQvPlRnLck5Tnhcf6se/XLcuApga7fCu01IRjgfPnPo9GUQm+/tora
# 2bta8VJ6zuIsWFDTwNXiFXHnMXqWXm43a2LZ8k1nokOMxJVi5j/Bph00Wjs3iXzH
# zv/VJMihvc8OJqoCgRnWERua5GvjgQo//dEOCj8BjSjTXMAXiTke/Kt/PTcZokhn
# oQgiBthsToTYtfZwln3rdo1g9kthVs2dO+I7unZ4Ye1oCSfTxCvNb2nPVoYJNSUM
# tFQucyJBUs2KBpTW/w5PO/tqUAidOVF8Uu88hXQknZI+r7BUvE8aGJWzAStf3z+z
# NQIDAQABo4IBGzCCARcwHQYDVR0OBBYEFAk1yvF2cmfuPzFan0bHkD7X3z0pMB8G
# A1UdIwQYMBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYGA1UdHwRPME0wS6BJoEeG
# RWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Rp
# bVN0YVBDQV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUH
# MAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljVGltU3Rh
# UENBXzIwMTAtMDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYB
# BQUHAwgwDQYJKoZIhvcNAQELBQADggEBAAKIQYIH147iU86OMgJh+xOpqb0ip1G0
# yPbRQEFUuG5+8/3G+Wgjwtn3A4+riwKglJ2EwtrBRZl3ru8WUz+IE/7teSrXT1Np
# 5BITg1z254zXl+US9qjhm3MahZNzGkL5qVhjSRUYiPpLEFLGcKShl6xPjhZUhMFA
# v/jc+YfFUAUPQLVwPPNrme/UJKIO+dnio3Gk/pp/0hh8pskHhsnEGrnYVlVCpHh0
# Do1rsfixOGHUBj+phzqTOZKmFS8TMKrnE9nz5OWyg01ljPpMBHqqd59PYP/cOyft
# eY77A2MiLoARZAkdqrAHtHk5Y7tAnunTtGX/hO+Q0zO9mXwEFJ9ftiMwggZxMIIE
# WaADAgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJV
# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9v
# dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0y
# NTA3MDEyMTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
# MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
# b24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIIBIjAN
# BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwTl/X6f2mUa3RU
# ENWlCgCChfvtfGhLLF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458YTBZsTBE
# D/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhgRvJYR4YyhB50
# YWeRX4FUsc+TTJLBxKZd0WETbijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQYrFd
# /XcfPfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrKsajyeioKMfDaTgaR
# togINeh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQAB
# o4IB5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8
# RhvFM2hahW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIB
# hjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fO
# mhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9w
# a2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggr
# BgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv
# bS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSAB
# Af8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9BggrBgEFBQcCARYxaHR0cDovL3d3
# dy5taWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggrBgEF
# BQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMAeQBfAFMAdABhAHQAZQBt
# AGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Eh
# b7Prpsz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7
# uVOMzPRgEop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqR
# UgCvOA8X9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2/QThcJ8ySif9
# Va8v/rbljjO7Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZSnFjnXshbcOco6I8
# +n99lmqQeKZt0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjggtSXlZOz39L9+
# Y1klD3ouOVd2onGqBooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7cQnfXXSYIghh
# 2rBQHm+98eEA3+cxB6STOvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvsxsvYgrRy
# zR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAzLhIp9cAvVCch98isTtoo
# uLGp25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx
# 16HSxVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8NoFA12u8JJxzVs341
# Hgi62jbb01+P3nSISRKhggLSMIICOwIBATCB/KGB1KSB0TCBzjELMAkGA1UEBhMC
# VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
# BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9w
# ZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkY4
# N0EtRTM3NC1EN0I5MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2
# aWNloiMKAQEwBwYFKw4DAhoDFQDtLGAe3UndKpNNKrMtyswZlAFh76CBgzCBgKR+
# MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS
# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
# HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBBQUAAgUA
# 5T+tszAiGA8yMDIxMTExNzIwMzQ1OVoYDzIwMjExMTE4MjAzNDU5WjB3MD0GCisG
# AQQBhFkKBAExLzAtMAoCBQDlP62zAgEAMAoCAQACAh5aAgH/MAcCAQACAhDtMAoC
# BQDlQP8zAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEA
# AgMHoSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEAKKvH6aHHt7rNeYjX
# YVTysSHnjpQChNYJZDBHxSAKK+9kb8Q2PxatX2vBwAOiKIQ7zV/PoF07hDsc9OVg
# eUGa3oSOQtPMDvqK8qSwNKrbac7gSRZfJl0CcniXcMMUKgZOKFN8gdONYM/T0PBw
# ypQVFaRCsYzGId5nck2HybumGEoxggMNMIIDCQIBATCBkzB8MQswCQYDVQQGEwJV
# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGlt
# ZS1TdGFtcCBQQ0EgMjAxMAITMwAAAWOLZMbJhZZldgAAAAABYzANBglghkgBZQME
# AgEFAKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJ
# BDEiBCAfEkD/Mh3whHjxzVZdyo5BsCD0evKGmyzDogaM5c7zLDCB+gYLKoZIhvcN
# AQkQAi8xgeowgecwgeQwgb0EIJxZ3ZcdoWOhKKQpuLjL0BgEiksHL1FvXqezUasR
# 9CNqMIGYMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
# EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
# bjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAFj
# i2TGyYWWZXYAAAAAAWMwIgQg/Ed6cf5NrPjpADy338W9N+nCtgyQ6jTJGUEfwXYE
# xBowDQYJKoZIhvcNAQELBQAEggEAT8OS5OijZ0KcwVVN6kRPlo/OoycGh4NyHQpF
# 4RHjE/dVente9h6P2zh3OMMWN6xZoAjnOQr7XRGqSROHhxnhTOGfLjUHc4KJ7cau
# dE8Nu3dMfHWUhWp2He6/e7rJdK5GZpfEBC026Q2eC4HQt66Ci0EHadH1wPt/RvRd
# w81SB9WVQ0sqqxRkTMNoaccWDbgbkPQAaIcT//aZtdyNrQrWNYV2SLCUvP26THdf
# ww9S/+6IEPSRczQ2VJZBjsgqJ44gNWOGDpPBmSl9wExIbl/ChnGGP96z2+JY5pOj
# +YZUV6B/6COPH+EWyZ3i3ggtoPzo2Boi0cQar8UkBW5i/jhJ6A==
# SIG # End signature block
